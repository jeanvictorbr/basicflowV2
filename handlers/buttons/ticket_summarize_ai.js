// Crie em: handlers/buttons/ticket_summarize_ai.js
const { EmbedBuilder } = require('discord.js');
const { getAIResponse } = require('../../utils/aiAssistant.js');
const hasFeature = require('../../utils/featureCheck.js');

module.exports = {
    customId: 'ticket_summarize_ai',
    async execute(interaction) {
        // 1. Verifica se a funcionalidade √© premium
        if (!await hasFeature(interaction.guild.id, 'TICKETS_PREMIUM')) {
            return interaction.reply({ content: 'Esta √© uma funcionalidade premium. Ative uma chave para us√°-la.', ephemeral: true });
        }

        await interaction.deferReply({ ephemeral: true });

        try {
            // 2. Busca o hist√≥rico completo de mensagens do ticket
            const messages = await interaction.channel.messages.fetch({ limit: 100 });
            if (messages.size < 3) {
                return interaction.editReply({ content: '‚ÑπÔ∏è N√£o h√° mensagens suficientes neste ticket para justificar um resumo.' });
            }

            const transcript = messages.reverse().map(m => `${m.author.tag}: ${m.content}`).join('\n');

            // 3. Cria um prompt de sistema detalhado para a IA
            const systemPrompt = `
                Voc√™ √© um especialista em suporte ao cliente. Sua tarefa √© ler a transcri√ß√£o de um ticket de suporte do Discord e criar um resumo claro e conciso para um membro da equipe que acabou de assumir o atendimento.
                Sua resposta DEVE ser um relat√≥rio com tr√™s se√ß√µes distintas:

                1.  **Problema Principal:** Identifique e descreva em uma frase qual √© a principal solicita√ß√£o ou problema do usu√°rio.
                2.  **Solu√ß√µes Tentadas:** Liste em formato de t√≥picos (bullet points) as solu√ß√µes ou etapas que j√° foram sugeridas ou tentadas, tanto pelo usu√°rio quanto por outros membros da equipe. Se nada foi tentado, escreva "Nenhuma solu√ß√£o foi tentada at√© o momento".
                3.  **Resumo Geral:** Forne√ßa um resumo de 1-2 frases sobre o estado atual da conversa e o que o usu√°rio est√° a aguardar.

                Seja objetivo e foque em extrair a informa√ß√£o mais relevante para acelerar a resolu√ß√£o do ticket.

                Transcri√ß√£o do Ticket:
                ---
                ${transcript}
                ---
            `;

            // 4. Chama a IA para gerar o resumo
            const summary = await getAIResponse(interaction.guild.id, [], transcript, systemPrompt, false);

            if (!summary) {
                return interaction.editReply({ content: '‚ùå A IA n√£o conseguiu gerar um resumo para este ticket. Tente novamente mais tarde.' });
            }

            // 5. Formata e envia a resposta em um embed
            const summaryEmbed = new EmbedBuilder()
                .setColor('Gold')
                .setTitle('üß† Resumo do Ticket Gerado por IA')
                .setDescription(summary)
                .setFooter({ text: `Resumo solicitado por: ${interaction.user.tag}` })
                .setTimestamp();

            await interaction.editReply({ embeds: [summaryEmbed] });

        } catch (error) {
            console.error('[Ticket Summarize AI] Erro ao gerar resumo:', error);
            await interaction.editReply({ content: '‚ùå Ocorreu um erro ao tentar buscar as mensagens e gerar o resumo.' });
        }
    }
};